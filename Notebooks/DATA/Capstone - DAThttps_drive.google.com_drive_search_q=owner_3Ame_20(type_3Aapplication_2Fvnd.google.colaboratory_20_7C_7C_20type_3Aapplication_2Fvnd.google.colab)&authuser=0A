{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMB1T7ZFKGv3CAf9qGfIH4f"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["DATA FINE TUNNING"],"metadata":{"id":"2js_V-QH0R70"}},{"cell_type":"markdown","source":["Quitar las participaciones de moderadores"],"metadata":{"id":"w40Sqnbz03F1"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"9zRQSqe30GkV","executionInfo":{"status":"ok","timestamp":1753383328593,"user_tz":-180,"elapsed":538,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"41a74072-7bf2-4886-c4eb-3979f2b906b4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total original rows: 602\n","Total participant rows: 300\n"]},{"output_type":"execute_result","data":{"text/plain":["  Grupo Plaza   Estado   Edades   NSE  Fecha de creación  Hora  \\\n","1  SG01   GDL  Jalisco  18 a 25  C-D+               2025  4:01   \n","3  SG01   GDL  Jalisco  18 a 25  C-D+               2025  4:04   \n","5  SG01   GDL  Jalisco  18 a 25  C-D+               2025  4:41   \n","7  SG01   GDL  Jalisco  18 a 25  C-D+               2025  4:52   \n","9  SG01   GDL  Jalisco  18 a 25  C-D+               2025  4:59   \n","\n","                 Participante           Rol  \\\n","1  Helen itzel Pacheco flores  Participante   \n","3  Helen itzel Pacheco flores  Participante   \n","5  Helen itzel Pacheco flores  Participante   \n","7  Helen itzel Pacheco flores  Participante   \n","9  Helen itzel Pacheco flores  Participante   \n","\n","                                       Participación  \\\n","1                                   Hola buenos días   \n","3                                     Bien, gracias.   \n","5                                   Ah claro, sí sí.   \n","7  No me ve. O sea ya prendí la cámara, o sea, no...   \n","9                                          Ah! Okay.   \n","\n","                            Participación minúsculas  \\\n","1                                   hola buenos días   \n","3                                     bien, gracias.   \n","5                                   ah claro, sí sí.   \n","7  no me ve. o sea ya prendí la cámara, o sea, no...   \n","9                                          ah! okay.   \n","\n","                                      Archivo fuente  \n","1  Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+  \n","3  Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+  \n","5  Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+  \n","7  Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+  \n","9  Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+  "],"text/html":["\n","  <div id=\"df-90ab1a0c-9b9c-4b4a-b37c-bed087e8fb63\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Grupo</th>\n","      <th>Plaza</th>\n","      <th>Estado</th>\n","      <th>Edades</th>\n","      <th>NSE</th>\n","      <th>Fecha de creación</th>\n","      <th>Hora</th>\n","      <th>Participante</th>\n","      <th>Rol</th>\n","      <th>Participación</th>\n","      <th>Participación minúsculas</th>\n","      <th>Archivo fuente</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>SG01</td>\n","      <td>GDL</td>\n","      <td>Jalisco</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2025</td>\n","      <td>4:01</td>\n","      <td>Helen itzel Pacheco flores</td>\n","      <td>Participante</td>\n","      <td>Hola buenos días</td>\n","      <td>hola buenos días</td>\n","      <td>Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SG01</td>\n","      <td>GDL</td>\n","      <td>Jalisco</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2025</td>\n","      <td>4:04</td>\n","      <td>Helen itzel Pacheco flores</td>\n","      <td>Participante</td>\n","      <td>Bien, gracias.</td>\n","      <td>bien, gracias.</td>\n","      <td>Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>SG01</td>\n","      <td>GDL</td>\n","      <td>Jalisco</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2025</td>\n","      <td>4:41</td>\n","      <td>Helen itzel Pacheco flores</td>\n","      <td>Participante</td>\n","      <td>Ah claro, sí sí.</td>\n","      <td>ah claro, sí sí.</td>\n","      <td>Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>SG01</td>\n","      <td>GDL</td>\n","      <td>Jalisco</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2025</td>\n","      <td>4:52</td>\n","      <td>Helen itzel Pacheco flores</td>\n","      <td>Participante</td>\n","      <td>No me ve. O sea ya prendí la cámara, o sea, no...</td>\n","      <td>no me ve. o sea ya prendí la cámara, o sea, no...</td>\n","      <td>Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>SG01</td>\n","      <td>GDL</td>\n","      <td>Jalisco</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2025</td>\n","      <td>4:59</td>\n","      <td>Helen itzel Pacheco flores</td>\n","      <td>Participante</td>\n","      <td>Ah! Okay.</td>\n","      <td>ah! okay.</td>\n","      <td>Grupo SG01 Plaza GDL Edades 18 a 25 años NSE C-D+</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90ab1a0c-9b9c-4b4a-b37c-bed087e8fb63')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-90ab1a0c-9b9c-4b4a-b37c-bed087e8fb63 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-90ab1a0c-9b9c-4b4a-b37c-bed087e8fb63');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-38bc06be-3b69-48ba-b51f-8bf907c8477d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38bc06be-3b69-48ba-b51f-8bf907c8477d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-38bc06be-3b69-48ba-b51f-8bf907c8477d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_participants","summary":"{\n  \"name\": \"df_participants\",\n  \"rows\": 300,\n  \"fields\": [\n    {\n      \"column\": \"Grupo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"SG02\",\n          \"SG04\",\n          \"SG01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Plaza\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"MTY\",\n          \"GDL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Estado\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Nuevo Le\\u00f3n\",\n          \"Jalisco\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Edades\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"35 a 55\",\n          \"18 a 25\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NSE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C+B\",\n          \"C-D+\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fecha de creaci\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2025,\n        \"max\": 2025,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hora\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 274,\n        \"samples\": [\n          \"18:11\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Participante\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Claudia Veloquio\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Participante\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Participaci\\u00f3n\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 286,\n        \"samples\": [\n          \"31 04 60\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Participaci\\u00f3n min\\u00fasculas\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 286,\n        \"samples\": [\n          \"31 04 60\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Archivo fuente\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Grupo SG01 Plaza MTY Edades 35 a 55 a\\u00f1os NSE C+B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","\n","# Load the CSV file (make sure you have uploaded it to Colab beforehand)\n","file_path = \"/content/Entrevistas.csv\"\n","df = pd.read_csv(file_path)\n","\n","# Filter only rows where the role is \"Participante\"\n","df_participants = df[df[\"Rol\"] == \"Participante\"].copy()\n","\n","# Print the number of original and filtered rows\n","print(f\"Total original rows: {len(df)}\")\n","print(f\"Total participant rows: {len(df_participants)}\")\n","\n","# Display the first few rows to verify\n","df_participants.head()\n"]},{"cell_type":"markdown","source":["Crear columnas Segmento y Subsegmento"],"metadata":{"id":"ewS0w9Qm07Ir"}},{"cell_type":"code","source":["# Create a new column combining Plaza, NSE and Edades for full segmentation\n","df_participants[\"Segmento\"] = df_participants[\"Plaza\"].str.strip() + \"_\" + \\\n","                               df_participants[\"NSE\"].str.strip() + \"_\" + \\\n","                               df_participants[\"Edades\"].str.strip()\n","\n","# Create a second column combining only NSE and Edades for broader classification\n","df_participants[\"Subsegmento\"] = df_participants[\"NSE\"].str.strip() + \"_\" + \\\n","                                  df_participants[\"Edades\"].str.strip()\n","\n","# Display a sample to verify the result\n","df_participants[[\"Plaza\", \"NSE\", \"Edades\", \"Segmento\", \"Subsegmento\"]].head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"7uy9r1Wk066j","executionInfo":{"status":"ok","timestamp":1753383344147,"user_tz":-180,"elapsed":72,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"00016e0d-0a71-4ec1-b3ac-c2e7ecef4a55"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Plaza   NSE   Edades          Segmento   Subsegmento\n","1   GDL  C-D+  18 a 25  GDL_C-D+_18 a 25  C-D+_18 a 25\n","3   GDL  C-D+  18 a 25  GDL_C-D+_18 a 25  C-D+_18 a 25\n","5   GDL  C-D+  18 a 25  GDL_C-D+_18 a 25  C-D+_18 a 25\n","7   GDL  C-D+  18 a 25  GDL_C-D+_18 a 25  C-D+_18 a 25\n","9   GDL  C-D+  18 a 25  GDL_C-D+_18 a 25  C-D+_18 a 25"],"text/html":["\n","  <div id=\"df-3eae83ac-2622-4bf6-b064-c10182c9c903\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Plaza</th>\n","      <th>NSE</th>\n","      <th>Edades</th>\n","      <th>Segmento</th>\n","      <th>Subsegmento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>GDL</td>\n","      <td>C-D+</td>\n","      <td>18 a 25</td>\n","      <td>GDL_C-D+_18 a 25</td>\n","      <td>C-D+_18 a 25</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>GDL</td>\n","      <td>C-D+</td>\n","      <td>18 a 25</td>\n","      <td>GDL_C-D+_18 a 25</td>\n","      <td>C-D+_18 a 25</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>GDL</td>\n","      <td>C-D+</td>\n","      <td>18 a 25</td>\n","      <td>GDL_C-D+_18 a 25</td>\n","      <td>C-D+_18 a 25</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>GDL</td>\n","      <td>C-D+</td>\n","      <td>18 a 25</td>\n","      <td>GDL_C-D+_18 a 25</td>\n","      <td>C-D+_18 a 25</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>GDL</td>\n","      <td>C-D+</td>\n","      <td>18 a 25</td>\n","      <td>GDL_C-D+_18 a 25</td>\n","      <td>C-D+_18 a 25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3eae83ac-2622-4bf6-b064-c10182c9c903')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3eae83ac-2622-4bf6-b064-c10182c9c903 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3eae83ac-2622-4bf6-b064-c10182c9c903');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8ec7c916-0d7d-43d2-b1b8-52fa0a1de478\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ec7c916-0d7d-43d2-b1b8-52fa0a1de478')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8ec7c916-0d7d-43d2-b1b8-52fa0a1de478 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_participants[[\\\"Plaza\\\", \\\"NSE\\\", \\\"Edades\\\", \\\"Segmento\\\", \\\"Subsegmento\\\"]]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Plaza\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GDL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NSE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"C-D+\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Edades\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"18 a 25\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Segmento\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"GDL_C-D+_18 a 25\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subsegmento\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"C-D+_18 a 25\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["Revisar y eliminar duplicados exactos"],"metadata":{"id":"6UnvrrcL1V4-"}},{"cell_type":"code","source":["# Check for exact duplicates based on Participante, Hora, and lowercased response\n","duplicates = df_participants.duplicated(subset=[\"Participante\", \"Hora\", \"Participación minúsculas\"], keep=\"first\")\n","\n","# Count how many duplicates were found\n","print(f\"Number of duplicated rows: {duplicates.sum()}\")\n","\n","# Drop duplicates from the DataFrame\n","df_participants_clean = df_participants[~duplicates].copy()\n","\n","# Confirm the new size after dropping duplicates\n","print(f\"New total after removing duplicates: {len(df_participants_clean)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KiNaQlQk1XCk","executionInfo":{"status":"ok","timestamp":1753383349836,"user_tz":-180,"elapsed":13,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"72f024f0-00b3-488f-be2e-cd67cf6593b5"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of duplicated rows: 0\n","New total after removing duplicates: 300\n"]}]},{"cell_type":"markdown","source":["Código para exportar dos bases por perfil"],"metadata":{"id":"fmX6Asre1pSI"}},{"cell_type":"code","source":["# Filter for Profile 1: CDMX, C-D+, 18-25\n","cdmx_cdmas = df_participants_clean[df_participants_clean[\"Segmento\"] == \"CDMX_C-D+_18 a 25\"]\n","\n","# Filter for Profile 2: MTY, C+B, 35-55\n","mty_cbmas = df_participants_clean[df_participants_clean[\"Segmento\"] == \"MTY_C+B_35 a 55\"]\n","\n","# Export each profile as separate CSV\n","cdmx_cdmas.to_csv(\"/content/Entrevistas_CDMX_C-D+_18-25.csv\", index=False)\n","mty_cbmas.to_csv(\"/content/Entrevistas_MTY_C+B_35-55.csv\", index=False)\n","\n","print(f\"CDMX_C-D+_18-25 rows: {len(cdmx_cdmas)}\")\n","print(f\"MTY_C+B_35-55 rows: {len(mty_cbmas)}\")\n","cdmx_cdmas.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"id":"SbbZehFU1qNQ","executionInfo":{"status":"ok","timestamp":1753383422170,"user_tz":-180,"elapsed":58,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"b090e7b4-7818-477e-ee93-5dbff8016e95"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["CDMX_C-D+_18-25 rows: 0\n","MTY_C+B_35-55 rows: 150\n"]},{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [Grupo, Plaza, Estado, Edades, NSE, Fecha de creación, Hora, Participante, Rol, Participación, Participación minúsculas, Archivo fuente, Segmento, Subsegmento]\n","Index: []"],"text/html":["\n","  <div id=\"df-c991ec99-9038-476d-ae11-bc7eeaa92c60\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Grupo</th>\n","      <th>Plaza</th>\n","      <th>Estado</th>\n","      <th>Edades</th>\n","      <th>NSE</th>\n","      <th>Fecha de creación</th>\n","      <th>Hora</th>\n","      <th>Participante</th>\n","      <th>Rol</th>\n","      <th>Participación</th>\n","      <th>Participación minúsculas</th>\n","      <th>Archivo fuente</th>\n","      <th>Segmento</th>\n","      <th>Subsegmento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c991ec99-9038-476d-ae11-bc7eeaa92c60')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c991ec99-9038-476d-ae11-bc7eeaa92c60 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c991ec99-9038-476d-ae11-bc7eeaa92c60');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cdmx_cdmas","repr_error":"Out of range float values are not JSON compliant: nan"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["Eliminar hora de participación"],"metadata":{"id":"JLkjWRlo2Md7"}},{"cell_type":"code","source":["# Drop the \"Hora\" column if it exists\n","cdmx_cdmas = cdmx_cdmas.drop(columns=[\"Hora\"], errors=\"ignore\")\n","mty_cbmas = mty_cbmas.drop(columns=[\"Hora\"], errors=\"ignore\")\n","\n","# Export again without the \"Hora\" column\n","cdmx_cdmas.to_csv(\"/content/Entrevistas_CDMX_C-D+_18-25.csv\", index=False)\n","mty_cbmas.to_csv(\"/content/Entrevistas_MTY_C+B_35-55.csv\", index=False)\n","\n"],"metadata":{"id":"xPZFdZ2S2M9x","executionInfo":{"status":"ok","timestamp":1753383460310,"user_tz":-180,"elapsed":29,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Código para crear dataset .jsonl con campos \"instruction\" y \"response\""],"metadata":{"id":"kgRmQJlu5-Nw"}},{"cell_type":"code","source":["import json\n","\n","# Create generic instruction for now\n","generic_instruction = \"Responde como lo haría una persona de tu perfil sociológico.\"\n","\n","# Convert CDMX base\n","with open(\"/content/dataset_CDMX_C-D+_18-25.jsonl\", \"w\", encoding=\"utf-8\") as f:\n","    for text in cdmx_cdmas[\"Participación minúsculas\"]:\n","        record = {\"instruction\": generic_instruction, \"response\": text}\n","        f.write(json.dumps(record, ensure_ascii=False) + \"\\n\")\n","\n","# Convert MTY base\n","with open(\"/content/dataset_MTY_C+B_35-55.jsonl\", \"w\", encoding=\"utf-8\") as f:\n","    for text in mty_cbmas[\"Participación minúsculas\"]:\n","        record = {\"instruction\": generic_instruction, \"response\": text}\n","        f.write(json.dumps(record, ensure_ascii=False) + \"\\n\")\n"],"metadata":{"id":"4JTxy3UT5_3s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Revisar .jsonl"],"metadata":{"id":"8j6GXlEK6iDn"}},{"cell_type":"code","source":["import json\n","\n","# Path to your .jsonl file\n","file_path = \"/content/dataset_CDMX_C-D+_18-25.jsonl\"  # o el otro dataset\n","\n","# Load and print the first 5 entries\n","with open(file_path, \"r\", encoding=\"utf-8\") as f:\n","    for i, line in enumerate(f):\n","        if i >= 5: break\n","        example = json.loads(line)\n","        print(json.dumps(example, indent=2, ensure_ascii=False))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"igKpmOqU6BBJ","executionInfo":{"status":"ok","timestamp":1749829712670,"user_tz":-60,"elapsed":19,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"1b739c44-567e-4565-b2ea-a60ff95e7add"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{\n","  \"instruction\": \"Responde como lo haría una persona de tu perfil sociológico.\",\n","  \"response\": \"sí\"\n","}\n","{\n","  \"instruction\": \"Responde como lo haría una persona de tu perfil sociológico.\",\n","  \"response\": \"muy buenas tardes me escucha bien.\"\n","}\n","{\n","  \"instruction\": \"Responde como lo haría una persona de tu perfil sociológico.\",\n","  \"response\": \"bien, estoy bien.\"\n","}\n","{\n","  \"instruction\": \"Responde como lo haría una persona de tu perfil sociológico.\",\n","  \"response\": \"disculpense disculpa si me si me retrasé es que no, no, cheque la hora ya cuando acordé ya.\"\n","}\n","{\n","  \"instruction\": \"Responde como lo haría una persona de tu perfil sociológico.\",\n","  \"response\": \"se escucha perfecto todo.\"\n","}\n"]}]},{"cell_type":"markdown","source":[" Código para análisis y limpieza de respuestas cortas"],"metadata":{"id":"jPdxhUtJ7f7N"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","def analyze_and_filter(df, label):\n","    # Compute text length in characters and words\n","    df[\"char_len\"] = df[\"Participación minúsculas\"].str.len()\n","    df[\"word_len\"] = df[\"Participación minúsculas\"].str.split().apply(len)\n","\n","    # Print average lengths\n","    avg_chars = df[\"char_len\"].mean()\n","    avg_words = df[\"word_len\"].mean()\n","    print(f\"{label} – Average length: {avg_chars:.2f} characters | {avg_words:.2f} words\")\n","\n","    # Plot histogram\n","    plt.hist(df[\"word_len\"], bins=50, color=\"steelblue\", edgecolor=\"black\")\n","    plt.title(f\"{label} – Word Count Distribution\")\n","    plt.xlabel(\"Words per response\")\n","    plt.ylabel(\"Frequency\")\n","    plt.grid(True)\n","    plt.show()\n","\n","    # Filter out short responses\n","    filtered = df[(df[\"char_len\"] >= 40) & (df[\"word_len\"] >= 10)].copy()\n","    print(f\"{label} – Kept {len(filtered)} out of {len(df)} rows after filtering.\")\n","\n","    # Drop helper columns\n","    return filtered.drop(columns=[\"char_len\", \"word_len\"])\n","\n","\n","# Apply to both DataFrames\n","cdmx_filtered = analyze_and_filter(cdmx_cdmas, \"CDMX_C-D+_18-25\")\n","mty_filtered = analyze_and_filter(mty_cbmas, \"MTY_C+B_35-55\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"iOreilax7gfL","executionInfo":{"status":"ok","timestamp":1749829713304,"user_tz":-60,"elapsed":598,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"ab2c1d89-bda4-45f4-b5fd-3f7024e14adf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CDMX_C-D+_18-25 – Average length: 208.62 characters | 40.60 words\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["CDMX_C-D+_18-25 – Kept 2695 out of 4376 rows after filtering.\n","MTY_C+B_35-55 – Average length: 190.21 characters | 37.08 words\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["MTY_C+B_35-55 – Kept 1667 out of 3321 rows after filtering.\n"]}]},{"cell_type":"markdown","source":["RAG DATASET"],"metadata":{"id":"ERW8TRUsB3M_"}},{"cell_type":"markdown","source":["Construir un DataFrame base por segmento desde df"],"metadata":{"id":"n72jfpl-H6sq"}},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":348},"id":"RsP7AY53-1dV","executionInfo":{"status":"ok","timestamp":1749829713338,"user_tz":-60,"elapsed":33,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"outputId":"1d311255-8e49-453a-be91-713cf61f0444"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Grupo Plaza Estado   Edades   NSE  Hora                     Participante  \\\n","0   SG1  CDMX   CDMX  18 a 25  C-D+  0:16                   Karime Galicia   \n","1   SG1  CDMX   CDMX  18 a 25  C-D+  0:54  Reservaciones México para Todos   \n","2   SG1  CDMX   CDMX  18 a 25  C-D+  0:57                   Karime Galicia   \n","3   SG1  CDMX   CDMX  18 a 25  C-D+  2:51            uriel Rodriguez Nieto   \n","4   SG1  CDMX   CDMX  18 a 25  C-D+  2:52                   Karime Galicia   \n","\n","            Rol                                      Participación  \\\n","0     Moderador  listo Ahora sí, disculpame Muchas gracias Osca...   \n","1  Participante                                                 sí   \n","2     Moderador  tenemos Antonieta tenemos acá Sandra César Emi...   \n","3  Participante                 Muy buenas tardes me escucha bien.   \n","4     Moderador  Te escucho perfecto, me ayudarías activando cá...   \n","\n","                            Participación minúsculas  \\\n","0  listo ahora sí, disculpame muchas gracias osca...   \n","1                                                 sí   \n","2  tenemos antonieta tenemos acá sandra césar emi...   \n","3                 muy buenas tardes me escucha bien.   \n","4  te escucho perfecto, me ayudarías activando cá...   \n","\n","                                      Archivo fuente  \n","0  Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...  \n","1  Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...  \n","2  Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...  \n","3  Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...  \n","4  Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...  "],"text/html":["\n","  <div id=\"df-20c463cd-c212-444b-ba54-226b850565ad\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Grupo</th>\n","      <th>Plaza</th>\n","      <th>Estado</th>\n","      <th>Edades</th>\n","      <th>NSE</th>\n","      <th>Hora</th>\n","      <th>Participante</th>\n","      <th>Rol</th>\n","      <th>Participación</th>\n","      <th>Participación minúsculas</th>\n","      <th>Archivo fuente</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SG1</td>\n","      <td>CDMX</td>\n","      <td>CDMX</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>0:16</td>\n","      <td>Karime Galicia</td>\n","      <td>Moderador</td>\n","      <td>listo Ahora sí, disculpame Muchas gracias Osca...</td>\n","      <td>listo ahora sí, disculpame muchas gracias osca...</td>\n","      <td>Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>SG1</td>\n","      <td>CDMX</td>\n","      <td>CDMX</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>0:54</td>\n","      <td>Reservaciones México para Todos</td>\n","      <td>Participante</td>\n","      <td>sí</td>\n","      <td>sí</td>\n","      <td>Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SG1</td>\n","      <td>CDMX</td>\n","      <td>CDMX</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>0:57</td>\n","      <td>Karime Galicia</td>\n","      <td>Moderador</td>\n","      <td>tenemos Antonieta tenemos acá Sandra César Emi...</td>\n","      <td>tenemos antonieta tenemos acá sandra césar emi...</td>\n","      <td>Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SG1</td>\n","      <td>CDMX</td>\n","      <td>CDMX</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2:51</td>\n","      <td>uriel Rodriguez Nieto</td>\n","      <td>Participante</td>\n","      <td>Muy buenas tardes me escucha bien.</td>\n","      <td>muy buenas tardes me escucha bien.</td>\n","      <td>Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SG1</td>\n","      <td>CDMX</td>\n","      <td>CDMX</td>\n","      <td>18 a 25</td>\n","      <td>C-D+</td>\n","      <td>2:52</td>\n","      <td>Karime Galicia</td>\n","      <td>Moderador</td>\n","      <td>Te escucho perfecto, me ayudarías activando cá...</td>\n","      <td>te escucho perfecto, me ayudarías activando cá...</td>\n","      <td>Copia de OP BOMB CDMX 2024_SG1_Jóvenes_Generac...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20c463cd-c212-444b-ba54-226b850565ad')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-20c463cd-c212-444b-ba54-226b850565ad button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-20c463cd-c212-444b-ba54-226b850565ad');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9441372c-1c1a-41d9-9fc6-8a8240c3b876\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9441372c-1c1a-41d9-9fc6-8a8240c3b876')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9441372c-1c1a-41d9-9fc6-8a8240c3b876 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Recreate 'Segmento' and 'Subsegmento' in the original df\n","df[\"Segmento\"] = df[\"Plaza\"].str.strip() + \"_\" + df[\"NSE\"].str.strip() + \"_\" + df[\"Edades\"].str.strip()\n","df[\"Subsegmento\"] = df[\"NSE\"].str.strip() + \"_\" + df[\"Edades\"].str.strip()\n"],"metadata":{"id":"EBx4wEwIIOv2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# temas: único diccionario usado para todo\n","temas_dict  = {\n","    \"economía\": [\n","        \"dinero\", \"trabajo\", \"trabajos\", \"empleo\", \"empleos\",\n","        \"precios\", \"precio\", \"caro\", \"cara\", \"inflación\", \"inflacion\",\n","        \"sueldo\", \"sueldos\", \"economía\", \"economia\"\n","    ],\n","    \"inseguridad\": [\n","        \"robo\", \"robos\", \"violencia\", \"asaltos\", \"asalto\",\n","        \"narco\", \"crimen\", \"crímenes\", \"delincuencia\", \"inseguridad\"\n","    ],\n","    \"política\": [\n","        \"política\", \"politica\", \"presidente\", \"gobierno\", \"gobiernos\",\n","        \"corrupción\", \"corrupcion\", \"4t\", \"partido\", \"partidos\", \"cámara\", \"camara\"\n","    ],\n","    \"salud\": [\n","        \"hospital\", \"hospitales\", \"medicina\", \"medicinas\", \"covid\",\n","        \"doctor\", \"doctores\", \"doctora\", \"salud\", \"enfermedad\", \"enfermedades\"\n","    ],\n","    \"educación\": [\n","        \"escuela\", \"escuelas\", \"universidad\", \"universidades\",\n","        \"maestro\", \"maestros\", \"maestra\", \"maestras\", \"beca\", \"becas\",\n","        \"estudio\", \"estudios\", \"educación\", \"educacion\"\n","    ],\n","    \"México\": [\"méxico\", \"mexico\", \"mexicano\", \"mexicana\", \"mexicanos\", \"mexicanas\", \"pais\", \"país\"],\n","    \"Estado\": [\"estado\", \"estados\", \"estatal\", \"estatales\"],\n","    \"Municipio\": [\"municipio\", \"municipios\", \"municipal\", \"municipales\", \"delegacion\", \"ciudad\"],\n","    \"López Obrador\": [\"amlo\", \"obrador\", \"lopez obrador\", \"lópez obrador\", \"presidente\", \"4t\", \"andres manuel\", \"cuatro t\"],\n","    \"Morena\": [\"morena\", \"4t\", \"cuatro t\", \"morenos\"],\n","    \"Movimiento Ciudadano\": [\"movimiento ciudadano\", \"mc\", \"eme ce\", \"eme\", \"movimiento naranja\", \"momvimiento ciudadano\"],\n","    \"PAN\": [\"pan\", \"acción nacional\", \"accion nacional\"],\n","    \"PRI\": [\"pri\", \"partido revolucionario institucional\", \"revolucionario institucional\"],\n","    \"Sheinbaum\": [\"sheinbaum\", \"claudia\", \"claudia sheinbaum\"],\n","    \"Orgullo Regional\": [\n","        \"orgullo\", \"orgulloso\", \"orgullosa\", \"región\", \"region\", \"regiones\",\n","        \"regional\", \"regionales\", \"soy de aquí\", \"soy de aqui\", \"mi tierra\"\n","    ],\n","    \"Gobernador\": [\"gobernador\", \"gobernadores\", \"gobernadora\", \"gobernadoras\", \"estado\"]\n","}\n"],"metadata":{"id":"iyKKfAJ3GdtC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def detectar_temas_regex(text, diccionario):\n","    import re\n","    found_themes = set()\n","    if isinstance(text, str):\n","        text_lower = text.lower()\n","        for theme, keywords in diccionario.items():\n","            for word in keywords:\n","                if re.search(rf'\\b{re.escape(word)}\\b', text_lower):\n","                    found_themes.add(theme)\n","    return list(found_themes) if found_themes else [\"Sin Clasificar\"]\n"],"metadata":{"id":"uUb6jv_377J8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["flattened_rows.append({\n","    \"rack_id\": current_rack_id,\n","    \"rol\": rol,\n","    \"participante\": nombre,\n","    \"texto\": texto,\n","    \"archivo_fuente\": archivo,\n","    \"perfil\": perfil,\n","    \"temas_directos\": temas_detectados\n","})\n","current_rack_index = 0\n","current_rack_id = None\n","last_file = None\n","last_theme_set = set()\n","\n","# Filter only the desired segment before building rack_id\n","filtered_df = df[df[\"Segmento\"] == \"CDMX_C-D+_18 a 25\"].copy()\n","\n","for _, row in filtered_df.iterrows():\n","    archivo = row[\"Archivo fuente\"]\n","    rol = row[\"Rol\"]\n","    nombre = str(row[\"Participante\"]).strip() if \"Participante\" in row else \"\"\n","    texto = str(row[\"Participación\"]).strip()\n","    perfil = row.get(\"Segmento\", \"\")\n","    texto_limpio = re.sub(r\"[^\\w\\s]\", \"\", texto.lower())\n","\n","    # Detect themes in this intervention\n","    temas_detectados = detectar_temas_regex(texto_limpio, temas_dict)\n","\n","    # Restart rack if the file changes\n","    if archivo != last_file:\n","        current_rack_id = f\"{archivo.split()[2]}_{current_rack_index:04d}\"\n","        current_rack_index = 1\n","        last_file = archivo\n","        last_theme_set = set(temas_detectados)\n","\n","    # Check if moderator introduces a new topic\n","    is_karime = \"karime galicia\" in nombre.lower()\n","    is_moderator = rol.lower() == \"moderador\"\n","\n","    if is_moderator and not is_karime:\n","        # If new theme introduced, start new rack\n","        tema_actual = set(temas_detectados)\n","        if tema_actual != last_theme_set and tema_actual != {\"Sin Clasificar\"}:\n","            current_rack_id = f\"{archivo.split()[2]}_{current_rack_index:04d}\"\n","            current_rack_index += 1\n","            last_theme_set = tema_actual\n","\n","    # Skip rows from Karime Galicia as moderator\n","    if is_moderator and is_karime:\n","        continue\n","\n","    # Append the row with current rack_id\n","    flattened_rows.append({\n","        \"rack_id\": current_rack_id,\n","        \"rol\": rol,\n","        \"participante\": nombre,\n","        \"texto\": texto,\n","        \"archivo_fuente\": archivo,\n","        \"perfil\": perfil,\n","        \"temas_directos\": temas_detectados\n","    })\n","\n","# Create new DataFrame\n","df_rag_tematizado = pd.DataFrame(flattened_rows)\n"],"metadata":{"id":"YwPr_lkR-ijC","executionInfo":{"status":"error","timestamp":1749830118343,"user_tz":-60,"elapsed":21,"user":{"displayName":"Joaquin Garcia Luna Perez","userId":"01168812787878955692"}},"colab":{"base_uri":"https://localhost:8080/","height":222},"outputId":"d62455d9-c791-4cf6-d45a-ba2ffc8ef737"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'rag_blocks_filtered' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-3871175058>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mflattened_rows\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblock\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrag_blocks_filtered\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mrack_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"CDMX_{i:04d}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mtemas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\", \"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"temas\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'rag_blocks_filtered' is not defined"]}]},{"cell_type":"code","source":["rack_theme_map = {}\n","\n","for rack, group in df_rag_tematizado.groupby(\"rack_id\"):\n","    temas_consolidados = set()\n","    for _, row in group.iterrows():\n","        if row[\"rol\"] == \"Moderador\" and \"karime galicia\" not in str(row[\"participante\"]).lower():\n","            temas_encontrados = detectar_temas_regex(str(row[\"texto\"]), temas_dict)\n","            temas_consolidados.update(temas_encontrados)\n","    rack_theme_map[rack] = list(temas_consolidados) if temas_consolidados else [\"Sin Clasificar\"]\n","\n","# Propaga directamente a la columna 'temas_directos'\n","df_rag_tematizado[\"temas_directos\"] = df_rag_tematizado[\"rack_id\"].map(rack_theme_map)\n"],"metadata":{"id":"qc_3mZcUP1ZO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Export full processed RAG DataFrame to CSV\n","df_rag_tematizado.to_csv(\"/content/df_rag_tematizado.csv\", index=False, encoding=\"utf-8\")"],"metadata":{"id":"edcc-7sbBJJQ"},"execution_count":null,"outputs":[]}]}